/-
Copyright (c) 2015 Microsoft Corporation. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Author: Jeremy Avigad

Extensional equality for functions, and a proof of function extensionality from quotients.
-/
prelude
import Leanbin.Init.Data.Quot
import Leanbin.Init.Logic

#align_import init.funext from "leanprover-community/lean"@"855e0efed3137762a7ba9aca242499b3cce59406"

open Quotient

universe u v

variable {α : Sort u} {β : α → Sort v}

namespace Function

/-- The relation stating that two functions are pointwise equal. -/
protected def Equiv (f₁ f₂ : ∀ x : α, β x) : Prop :=
  ∀ x, f₁ x = f₂ x
#align function.equiv Function.Equiv

local infixl:50 " ~ " => Function.Equiv

protected theorem Equiv.refl (f : ∀ x : α, β x) : f ~ f := fun x => rfl
#align function.equiv.refl Function.Equiv.refl

protected theorem Equiv.symm {f₁ f₂ : ∀ x : α, β x} : f₁ ~ f₂ → f₂ ~ f₁ := fun h x => Eq.symm (h x)
#align function.equiv.symm Function.Equiv.symm

protected theorem Equiv.trans {f₁ f₂ f₃ : ∀ x : α, β x} : f₁ ~ f₂ → f₂ ~ f₃ → f₁ ~ f₃ :=
  fun h₁ h₂ x => Eq.trans (h₁ x) (h₂ x)
#align function.equiv.trans Function.Equiv.trans

protected theorem Equiv.is_equivalence (α : Sort u) (β : α → Sort v) :
    Equivalence (@Function.Equiv α β) :=
  Equivalence.mk (@Function.Equiv α β) (@Equiv.refl α β) (@Equiv.symm α β) (@Equiv.trans α β)
#align function.equiv.is_equivalence Function.Equiv.is_equivalence

/-- The setoid generated by pointwise equality. -/
@[local instance]
def funSetoid (α : Sort u) (β : α → Sort v) : Setoid (∀ x : α, β x) :=
  Setoid.mk (@Function.Equiv α β) (Function.Equiv.is_equivalence α β)
#align function.fun_setoid Function.funSetoid

/-- The quotient of the function type by pointwise equality. -/
def Extfun (α : Sort u) (β : α → Sort v) : Sort imax u v :=
  Quotient (funSetoid α β)
#align function.extfun Function.Extfun

/-- The map from functions into the qquotient by pointwise equality. -/
def funToExtfun (f : ∀ x : α, β x) : Extfun α β :=
  ⟦f⟧
#align function.fun_to_extfun Function.funToExtfun

/-- From an element of `extfun` we can retrieve an actual function. -/
def extfunApp (f : Extfun α β) : ∀ x : α, β x := fun x =>
  Quot.liftOn f (fun f : ∀ x : α, β x => f x) fun f₁ f₂ h => h x
#align function.extfun_app Function.extfunApp

end Function

open Function

attribute [local instance] fun_setoid

#print funext /-
/-- Function extensionality, proven using quotients. -/
theorem funext {f₁ f₂ : ∀ x : α, β x} (h : ∀ x, f₁ x = f₂ x) : f₁ = f₂ :=
  show extfunApp ⟦f₁⟧ = extfunApp ⟦f₂⟧ from congr_arg extfunApp (sound h)
#align funext funext
-/

attribute [intro!] funext

local infixl:50 " ~ " => Function.Equiv

instance Pi.subsingleton [∀ a, Subsingleton (β a)] : Subsingleton (∀ a, β a) :=
  ⟨fun f₁ f₂ => funext fun a => Subsingleton.elim (f₁ a) (f₂ a)⟩
#align pi.subsingleton Pi.subsingleton

